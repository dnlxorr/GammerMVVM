// Generated by Dagger (https://dagger.dev).
package com.cas.gammermvvmapp.di;

import com.cas.gammermvvmapp.domain.repository.AuthRepository;
import com.cas.gammermvvmapp.domain.usecases.auth.AuthUseCases;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideAuthUseCasesFactory implements Factory<AuthUseCases> {
  private final Provider<AuthRepository> repositoryProvider;

  public AppModule_ProvideAuthUseCasesFactory(Provider<AuthRepository> repositoryProvider) {
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public AuthUseCases get() {
    return provideAuthUseCases(repositoryProvider.get());
  }

  public static AppModule_ProvideAuthUseCasesFactory create(
      Provider<AuthRepository> repositoryProvider) {
    return new AppModule_ProvideAuthUseCasesFactory(repositoryProvider);
  }

  public static AuthUseCases provideAuthUseCases(AuthRepository repository) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideAuthUseCases(repository));
  }
}
